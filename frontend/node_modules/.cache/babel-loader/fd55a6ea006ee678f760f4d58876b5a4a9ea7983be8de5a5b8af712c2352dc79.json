{"ast":null,"code":"var _jsxFileName = \"/Users/yuqi.guo/Desktop/quill/frontend/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Chart from './Chart'; // Ensure this import is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  containerStyle,\n  onClickDashboardItem,\n  dashboardName\n}) => {\n  _s();\n  const [charts, setCharts] = useState([]);\n  fetch(`http://localhost:8000/api/charts/${dashboardName}`).then(response => response.json()).then(data => {\n    // Casting the data and configuration for each chart\n    const castedCharts = data.map(item => ({\n      id: item.config.id,\n      title: item.config.name,\n      chartType: item.config.chartType,\n      xAxisField: item.config.xAxisField,\n      yAxisField: item.config.yAxisField,\n      data: item.data.map(dataItem => ({\n        ...dataItem,\n        [item.config.yAxisField]: parseFloat(dataItem[item.config.yAxisField])\n      }))\n    }));\n    setCharts(castedCharts);\n  }).catch(error => console.error('Error fetching charts:', error));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: dashboardName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-grid\",\n      children: charts.map(chart => /*#__PURE__*/_jsxDEV(Chart, {\n        chart: chart,\n        onClick: () => onClickDashboardItem(chart)\n      }, chart.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"zHUvcZzt8/mAptXBuvgeuWJeoQA=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","Chart","jsxDEV","_jsxDEV","Dashboard","containerStyle","onClickDashboardItem","dashboardName","_s","charts","setCharts","fetch","then","response","json","data","castedCharts","map","item","id","config","title","name","chartType","xAxisField","yAxisField","dataItem","parseFloat","catch","error","console","style","children","fileName","_jsxFileName","lineNumber","columnNumber","className","chart","onClick","_c","$RefreshReg$"],"sources":["/Users/yuqi.guo/Desktop/quill/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Chart from './Chart';  // Ensure this import is correct\n\nconst Dashboard = ({ containerStyle, onClickDashboardItem, dashboardName }) => {\n  const [charts, setCharts] = useState([]);\n\n  fetch(`http://localhost:8000/api/charts/${dashboardName}`)\n      .then(response => response.json())\n      .then(data => {\n        // Casting the data and configuration for each chart\n        const castedCharts = data.map(item => ({\n          id: item.config.id,\n          title: item.config.name,\n          chartType: item.config.chartType,\n          xAxisField: item.config.xAxisField,\n          yAxisField: item.config.yAxisField,\n          data: item.data.map(dataItem => ({\n            ...dataItem,\n            [item.config.yAxisField]: parseFloat(dataItem[item.config.yAxisField])\n          }))\n        }));\n        setCharts(castedCharts);\n      })\n      .catch(error => console.error('Error fetching charts:', error));\n\n  return (\n    <div style={containerStyle}>\n      <h2>{dashboardName}</h2>\n      <div className=\"chart-grid\">\n        {charts.map(chart => (\n          <Chart key={chart.id} chart={chart} onClick={() => onClickDashboardItem(chart)} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,SAAS,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,SAAS,GAAGA,CAAC;EAAEC,cAAc;EAAEC,oBAAoB;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC7E,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExCW,KAAK,CAAE,oCAAmCJ,aAAc,EAAC,CAAC,CACrDK,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACZ;IACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,GAAG,CAACC,IAAI,KAAK;MACrCC,EAAE,EAAED,IAAI,CAACE,MAAM,CAACD,EAAE;MAClBE,KAAK,EAAEH,IAAI,CAACE,MAAM,CAACE,IAAI;MACvBC,SAAS,EAAEL,IAAI,CAACE,MAAM,CAACG,SAAS;MAChCC,UAAU,EAAEN,IAAI,CAACE,MAAM,CAACI,UAAU;MAClCC,UAAU,EAAEP,IAAI,CAACE,MAAM,CAACK,UAAU;MAClCV,IAAI,EAAEG,IAAI,CAACH,IAAI,CAACE,GAAG,CAACS,QAAQ,KAAK;QAC/B,GAAGA,QAAQ;QACX,CAACR,IAAI,CAACE,MAAM,CAACK,UAAU,GAAGE,UAAU,CAACD,QAAQ,CAACR,IAAI,CAACE,MAAM,CAACK,UAAU,CAAC;MACvE,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IACHf,SAAS,CAACM,YAAY,CAAC;EACzB,CAAC,CAAC,CACDY,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC;EAEnE,oBACE1B,OAAA;IAAK4B,KAAK,EAAE1B,cAAe;IAAA2B,QAAA,gBACzB7B,OAAA;MAAA6B,QAAA,EAAKzB;IAAa;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxBjC,OAAA;MAAKkC,SAAS,EAAC,YAAY;MAAAL,QAAA,EACxBvB,MAAM,CAACQ,GAAG,CAACqB,KAAK,iBACfnC,OAAA,CAACF,KAAK;QAAgBqC,KAAK,EAAEA,KAAM;QAACC,OAAO,EAAEA,CAAA,KAAMjC,oBAAoB,CAACgC,KAAK;MAAE,GAAnEA,KAAK,CAACnB,EAAE;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA6D,CAClF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAhCIJ,SAAS;AAAAoC,EAAA,GAATpC,SAAS;AAkCf,eAAeA,SAAS;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}