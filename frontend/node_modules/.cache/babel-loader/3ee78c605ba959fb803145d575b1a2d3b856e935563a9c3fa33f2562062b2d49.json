{"ast":null,"code":"var _jsxFileName = \"/Users/yuqi.guo/Desktop/quill/frontend/src/components/Chart.js\";\nimport React from 'react';\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart = ({\n  chart\n}) => {\n  // Parsing data: Convert 'total_sales' from string to number\n  const parsedData = chart.data.map(item => ({\n    ...item,\n    [chart.yAxisField]: parseFloat(item[chart.yAxisField])\n  }));\n\n  // Determine chart type and render accordingly\n  const renderChart = () => {\n    switch (chart.chartType) {\n      case 'line':\n        return /*#__PURE__*/_jsxDEV(LineChart, {\n          width: 600,\n          height: 300,\n          data: parsedData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: chart.xAxisField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: chart.yAxisField,\n            stroke: \"#8884d8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this);\n      case 'bar':\n        return /*#__PURE__*/_jsxDEV(BarChart, {\n          width: 600,\n          height: 300,\n          data: parsedData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: chart.xAxisField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: chart.yAxisField,\n            fill: \"#8884d8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Chart type not supported\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: chart.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), renderChart()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","BarChart","Bar","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","Chart","chart","parsedData","data","map","item","yAxisField","parseFloat","renderChart","chartType","width","height","children","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","xAxisField","type","stroke","fill","className","title","_c","$RefreshReg$"],"sources":["/Users/yuqi.guo/Desktop/quill/frontend/src/components/Chart.js"],"sourcesContent":["import React from 'react';\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nconst Chart = ({ chart }) => {\n  // Parsing data: Convert 'total_sales' from string to number\n  const parsedData = chart.data.map(item => ({\n    ...item,\n    [chart.yAxisField]: parseFloat(item[chart.yAxisField])\n  }));\n\n  // Determine chart type and render accordingly\n  const renderChart = () => {\n    switch (chart.chartType) {\n      case 'line':\n        return (\n          <LineChart width={600} height={300} data={parsedData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={chart.xAxisField} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line type=\"monotone\" dataKey={chart.yAxisField} stroke=\"#8884d8\" />\n          </LineChart>\n        );\n      case 'bar':\n        return (\n          <BarChart width={600} height={300} data={parsedData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={chart.xAxisField} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey={chart.yAxisField} fill=\"#8884d8\" />\n          </BarChart>\n        );\n      default:\n        return <p>Chart type not supported</p>;\n    }\n  };\n\n  return (\n    <div className=\"chart-item\">\n      <h3>{chart.title}</h3>\n      {renderChart()}\n    </div>\n  );\n};\n\nexport default Chart;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,GAAG,EAAEC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExG,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAC3B;EACA,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAI,CAACC,GAAG,CAACC,IAAI,KAAK;IACzC,GAAGA,IAAI;IACP,CAACJ,KAAK,CAACK,UAAU,GAAGC,UAAU,CAACF,IAAI,CAACJ,KAAK,CAACK,UAAU,CAAC;EACvD,CAAC,CAAC,CAAC;;EAEH;EACA,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxB,QAAQP,KAAK,CAACQ,SAAS;MACrB,KAAK,MAAM;QACT,oBACEV,OAAA,CAACR,SAAS;UAACmB,KAAK,EAAE,GAAI;UAACC,MAAM,EAAE,GAAI;UAACR,IAAI,EAAED,UAAW;UAAAU,QAAA,gBACnDb,OAAA,CAACJ,aAAa;YAACkB,eAAe,EAAC;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACvClB,OAAA,CAACN,KAAK;YAACyB,OAAO,EAAEjB,KAAK,CAACkB;UAAW;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACpClB,OAAA,CAACL,KAAK;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACTlB,OAAA,CAACH,OAAO;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACXlB,OAAA,CAACF,MAAM;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACVlB,OAAA,CAACP,IAAI;YAAC4B,IAAI,EAAC,UAAU;YAACF,OAAO,EAAEjB,KAAK,CAACK,UAAW;YAACe,MAAM,EAAC;UAAS;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3D,CAAC;MAEhB,KAAK,KAAK;QACR,oBACElB,OAAA,CAACV,QAAQ;UAACqB,KAAK,EAAE,GAAI;UAACC,MAAM,EAAE,GAAI;UAACR,IAAI,EAAED,UAAW;UAAAU,QAAA,gBAClDb,OAAA,CAACJ,aAAa;YAACkB,eAAe,EAAC;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACvClB,OAAA,CAACN,KAAK;YAACyB,OAAO,EAAEjB,KAAK,CAACkB;UAAW;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACpClB,OAAA,CAACL,KAAK;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACTlB,OAAA,CAACH,OAAO;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACXlB,OAAA,CAACF,MAAM;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACVlB,OAAA,CAACT,GAAG;YAAC4B,OAAO,EAAEjB,KAAK,CAACK,UAAW;YAACgB,IAAI,EAAC;UAAS;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzC,CAAC;MAEf;QACE,oBAAOlB,OAAA;UAAAa,QAAA,EAAG;QAAwB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;IAC1C;EACF,CAAC;EAED,oBACElB,OAAA;IAAKwB,SAAS,EAAC,YAAY;IAAAX,QAAA,gBACzBb,OAAA;MAAAa,QAAA,EAAKX,KAAK,CAACuB;IAAK;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACrBT,WAAW,CAAC,CAAC;EAAA;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV,CAAC;AAACQ,EAAA,GA3CIzB,KAAK;AA6CX,eAAeA,KAAK;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}